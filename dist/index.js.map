{
  "version": 3,
  "sources": ["../node_modules/@jyostudio/overload/src/index.js", "../src/index.js"],
  "sourcesContent": ["const ANY_STR = \"*\";\r\nconst REST_STR = \"...\";\r\n\r\n/**\r\n * \u5185\u90E8\u7C7B\u578B\u7236\u7EA7\u6807\u5FD7\r\n */\r\nconst INNER_TYPE_FATHER = \"##INNER_TYPE##\";\r\n\r\n/**\r\n * \u5185\u90E8\u7C7B\u578B\u5B50\u7EA7\u6807\u5FD7\r\n */\r\nconst INNER_TYPE_SON = \"@@INNER_TYPE@@\";\r\n\r\n/**\r\n * \u5339\u914D\u7C7B\u578B\r\n * @param {any} param - \u4F20\u5165\u7684\u53C2\u6570\r\n * @param {any} type - \u671F\u671B\u7684\u7C7B\u578B\r\n * @returns {Boolean} \u662F\u5426\u5339\u914D\r\n */\r\nfunction matchType(param, type) {\r\n  if (Array.isArray(type)) {\r\n    for (let i = 0; i < type.length; i++) {\r\n      if (matchType(param, type[i])) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if (typeof type !== \"function\") {\r\n    if (\r\n      type === ANY_STR && param !== null ||\r\n      type === REST_STR ||\r\n      (type === null && param === null) ||\r\n      type === typeof param\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  switch (typeof param) {\r\n    case \"function\":\r\n    case \"object\":\r\n      break;\r\n    case \"string\": param = String; break;\r\n    case \"number\": param = Number; break;\r\n    case \"boolean\": param = Boolean; break;\r\n    case \"symbol\": param = Symbol; break;\r\n    case \"bigint\": param = BigInt; break;\r\n    default: param = Object(param); break;\r\n  }\r\n\r\n  if (param === type || param instanceof type) {\r\n    return true;\r\n  }\r\n\r\n  if (param?.[INNER_TYPE_SON]) {\r\n    return param[INNER_TYPE_SON] === type?.[INNER_TYPE_FATHER];\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * \u83B7\u53D6\u7C7B\u578B\u540D\u79F0\r\n * @param {any} param - \u4F20\u5165\u7684\u53C2\u6570\r\n * @returns {String} \u7C7B\u578B\u540D\u79F0\r\n */\r\nfunction getTypeName(param) {\r\n  if (param === null) {\r\n    return \"null\";\r\n  }\r\n\r\n  if (param === ANY_STR) {\r\n    return \"(\u4EFB\u610F)\";\r\n  }\r\n\r\n  const paramType = typeof param;\r\n\r\n  if (![\"function\", \"object\"].includes(paramType)) {\r\n    return paramType[0].toUpperCase() + paramType.slice(1);;\r\n  }\r\n\r\n  let className = (param?.name || param?.constructor?.name || \"(\u672A\u77E5)\").split(\" \").pop();\r\n\r\n  [INNER_TYPE_FATHER, INNER_TYPE_SON].forEach(v => {\r\n    if (param?.[v]) {\r\n      className += `<${getTypeName(param?.[v])}>`;\r\n    }\r\n  });\r\n\r\n  if (paramType === \"function\" && className === \"anonymous\") {\r\n    return \"(\u533F\u540D)\";\r\n  }\r\n\r\n  return className;\r\n}\r\n\r\n/**\r\n * \u629B\u51FA\u5806\u6808\u4FE1\u606F\r\n * @param {Error} err - \u9519\u8BEF\u5BF9\u8C61\r\n * @param {...any} args - \u53C2\u6570\u5217\u8868\r\n * @throws {Error}\r\n */\r\nfunction throwStackInfo(err, types, args) {\r\n  const stackList = err.stack.split(\"\\n\").splice(3);\r\n  let errorMessage = \"\";\r\n  let formattedStack = \"\\n\";\r\n  let errorMethodName = \"\";\r\n\r\n  stackList.forEach((stackLine, index, arr) => {\r\n    const parts = stackLine.trim().split(\" \");\r\n    const fullMethodName = parts.length === 3 ? parts[1] : `(\u533F\u540D)`;\r\n    const methodName = fullMethodName.split(\".\").pop();\r\n\r\n    arr[index] = {\r\n      fullMethodName,\r\n      methodName,\r\n      link: parts.length === 3 ? parts[2] : parts[1],\r\n    };\r\n\r\n    if (!index) {\r\n      errorMethodName = methodName;\r\n    } else {\r\n      formattedStack += `${methodName}\\t${arr[index].link}\\n`;\r\n    }\r\n  });\r\n\r\n  const matchingTypes = types.find(v => v.length === args.length);\r\n\r\n  if (!matchingTypes) {\r\n    errorMessage += `\u65B9\u6CD5 ${errorMethodName} \u4E0D\u5B58\u5728 ${args.length} \u4E2A\u53C2\u6570\u7684\u91CD\u8F7D\u3002`;\r\n    errorMessage += formattedStack;\r\n    throw new Error(errorMessage);\r\n  }\r\n\r\n  let hasError = false;\r\n  matchingTypes.forEach((expectedType, i) => {\r\n    if (!matchType(args[i], expectedType)) {\r\n      const expectedTypeNames = Array.isArray(expectedType)\r\n        ? expectedType.map(getTypeName).join(\"\u3001\")\r\n        : getTypeName(expectedType);\r\n\r\n      errorMessage += `${hasError ? \"\\n\" : \"\"}\u53C2\u6570${i + 1}\uFF1A\u9884\u671F ${expectedTypeNames} \u4F46\u5F97\u5230 ${getTypeName(args[i])}\u3002`;\r\n\r\n      hasError = true;\r\n    }\r\n  });\r\n\r\n  if (hasError) {\r\n    errorMessage = `\u65B9\u6CD5 ${errorMethodName} \u8C03\u7528\u9519\u8BEF\\n${errorMessage}`;\r\n    errorMessage += formattedStack;\r\n    throw new Error(errorMessage);\r\n  }\r\n}\r\n\r\n/**\r\n * \u8FD4\u56DE\u4E00\u4E2A\u91CD\u8F7D\u51FD\u6570\r\n * @returns {Function} \u91CD\u8F7D\u51FD\u6570\r\n */\r\nfunction createOverload() {\r\n  const TYPES = [];\r\n  const FNS = [];\r\n  const OPTIONS = [];\r\n  let anyFn = null;\r\n\r\n  /**\r\n   * \u8C03\u7528\u515C\u5E95\u51FD\u6570\r\n   * @param  {...any} args - \u53C2\u6570\u5217\u8868\r\n   * @returns {any} \u8FD4\u56DE\u503C\r\n   */\r\n  function runAny(...args) {\r\n    if (anyFn) {\r\n      return anyFn.apply(this, args);\r\n    }\r\n\r\n    throwStackInfo(new Error(), TYPES, args);\r\n  }\r\n\r\n  /**\r\n   * \u91CD\u8F7D\u51FD\u6570\r\n   * @param {...any} params - \u53C2\u6570\u5217\u8868\r\n   * @returns {any} \u8FD4\u56DE\u503C\r\n   */\r\n  function overload(...params) {\r\n    if (!TYPES.length) {\r\n      return runAny.apply(this, params);\r\n    }\r\n\r\n    const paramsLength = params.length;\r\n\r\n    loop: for (let i = 0; i < TYPES.length; i++) {\r\n      const types = TYPES[i];\r\n      const options = OPTIONS[i];\r\n      const typesLength = types.length;\r\n\r\n      if ((options.length !== paramsLength && !options.rest) ||\r\n        (paramsLength === 0 && typesLength && types[0] !== REST_STR)) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = 0; j < paramsLength; j++) {\r\n        const type = types[j] || types[typesLength - 1];\r\n        if (!matchType(params[j], type)) {\r\n          try {\r\n            const convert = type?.[\"\u21C4\"]?.(params[j]);\r\n            if (matchType(convert, type)) {\r\n              params[j] = convert;\r\n              continue;\r\n            }\r\n          } catch { }\r\n          continue loop;\r\n        }\r\n      }\r\n\r\n      return FNS[i].apply(this, params);\r\n    }\r\n\r\n    return runAny.apply(this, params);\r\n  }\r\n\r\n  /**\r\n   * \u6DFB\u52A0\u51FD\u6570\u91CD\u8F7D\r\n   * @param {Array} types - \u53C2\u6570\u7C7B\u578B\u5217\u8868\r\n   * @param {Function} fn - \u8981\u8C03\u7528\u7684\u51FD\u6570\r\n   * @returns {Function} \u91CD\u8F7D\u51FD\u6570\r\n   * @throws {TypeError}\r\n   * @throws {Error}\r\n   */\r\n  overload.add = function (types, fn) {\r\n    if (!Array.isArray(TYPES)) {\r\n      throw new TypeError(\"types \u5FC5\u987B\u662F\u6570\u7EC4\u3002\");\r\n    }\r\n\r\n    if (typeof fn !== \"function\") {\r\n      throw new TypeError(\"fn \u5FC5\u987B\u662F\u51FD\u6570\u3002\");\r\n    }\r\n\r\n    for (let i = 0; i < types.length; i++) {\r\n      if (types[i] === REST_STR && i !== types.length - 1) {\r\n        throw new SyntaxError(`${REST_STR} \u5FC5\u987B\u662F\u6700\u540E\u4E00\u4E2A\u53C2\u6570\u3002`);\r\n      }\r\n    }\r\n\r\n    TYPES.forEach((key) => {\r\n      if (key.length !== types.length) {\r\n        return;\r\n      }\r\n\r\n      for (let i = 0; i < key.length; i++) {\r\n        if (key[i] !== types[i]) return;\r\n      }\r\n\r\n      throw new Error(\"\u5DF2\u5B58\u5728\u6B64\u7B7E\u540D\u7684\u91CD\u8F7D\u3002\");\r\n    });\r\n\r\n    TYPES.forEach(type => {\r\n      const isArray = Array.isArray(type);\r\n      if (typeof type !== \"function\" && !isArray && type !== ANY_STR && type !== REST_STR) {\r\n        throw new TypeError(`\u671F\u671B\u7C7B\u578B\u4E3A Class\u3001Array\u3001${ANY_STR} \u6216\u672B\u5C3E\u53C2\u6570\u4E5F\u53EF\u4EE5\u662F ${REST_STR}\u3002`);\r\n      }\r\n\r\n      if (isArray) {\r\n        for (let i = 0; i < type.length; i++) {\r\n          const typeofStr = typeof type[i];\r\n          if (\r\n            typeofStr !== \"function\" &&\r\n            !(typeofStr === \"object\" && typeof type[i]?.constructor === \"function\") &&\r\n            type[i] !== null &&\r\n            type[i] !== ANY_STR\r\n          ) {\r\n            throw new TypeError(`\u7C7B\u578B\u5FC5\u987B\u4E3A Class\u3001null \u6216 ${ANY_STR}\u3002`);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    TYPES.push(types);\r\n    FNS.push(fn);\r\n    OPTIONS.push({\r\n      length: types.length,\r\n      rest: types[types.length - 1] === REST_STR,\r\n    });\r\n\r\n    return overload;\r\n  };\r\n\r\n  /**\r\n   * \u8BBE\u7F6E\u515C\u5E95\u51FD\u6570\r\n   * @param {Function} fn - \u515C\u5E95\u51FD\u6570\r\n   * @returns {Function} \u91CD\u8F7D\u51FD\u6570\r\n   * @throws {TypeError}\r\n   * @throws {Error}\r\n   */\r\n  overload.any = function (fn) {\r\n    if (anyFn) {\r\n      throw new Error(\"any \u51FD\u6570\u5DF2\u5B58\u5728\u3002\");\r\n    }\r\n\r\n    if (typeof fn !== \"function\") {\r\n      throw new TypeError(\"fn \u5FC5\u987B\u662F\u51FD\u6570\u3002\");\r\n    }\r\n\r\n    anyFn = fn;\r\n\r\n    return overload;\r\n  };\r\n\r\n  return overload;\r\n}\r\n\r\nexport default createOverload()\r\n  .add([], function () {\r\n    return createOverload();\r\n  })\r\n  .add([Array, Function], function (types, fn) {\r\n    const result = createOverload();\r\n    result.add(types, fn);\r\n    return result;\r\n  });", "import overload from \"@jyostudio/overload\";\r\n\r\n/**\r\n * @template T\r\n * @class List\r\n */\r\nexport default class List {\r\n    /**\r\n     * \u5143\u7D20\u5217\u8868\r\n     * @type {T[]}\r\n     */\r\n    #list = [];\r\n\r\n    /**\r\n     * \u5185\u90E8\u7C7B\u578B\r\n     * @type {T}\r\n     */\r\n    #innerType = null;\r\n\r\n    /**\r\n     * \u4EE3\u7406\r\n     * @type {Proxy<List>}\r\n     */\r\n    #proxy = null;\r\n\r\n    get length() {\r\n        return this.#list.length;\r\n    }\r\n\r\n    get [Symbol.isConcatSpreadable]() {\r\n        return true;\r\n    }\r\n\r\n    get [Symbol.toStringTag]() {\r\n        return `List<${this.#innerType.name}>`;\r\n    }\r\n\r\n    static #_constructor = function (...params) {\r\n        List.#_constructor = overload()\r\n            .add([Function],\r\n                /**\r\n                 * @this {List<T>}\r\n                 * @param {T} innerType - \u5185\u90E8\u7C7B\u578B\r\n                 */\r\n                function (innerType) {\r\n                    this.#innerType = innerType;\r\n                })\r\n            .add([Function, [Array, List.T(typeof params?.[0] === \"function\" ? params[0] : class { })]],\r\n                /**\r\n                 * @this {List<T>}\r\n                 * @param {T} innerType - \u5185\u90E8\u7C7B\u578B\r\n                 * @param {T[] | List<T>} list - \u5217\u8868\r\n                 */\r\n                function (innerType, list) {\r\n                    this.#innerType = innerType;\r\n                    for (let item of list) {\r\n                        this.add(item);\r\n                    }\r\n                })\r\n            .add([Function, Number], function (innerType, count) {\r\n                this.#innerType = innerType;\r\n                let defaultValue;\r\n\r\n                if (innerType === Number) defaultValue = 0;\r\n                else if (innerType === String) defaultValue = \"\";\r\n                else if (innerType === Boolean) defaultValue = false;\r\n                else if (innerType === BigInt) defaultValue = BigInt(0);\r\n                else if (innerType === Symbol) defaultValue = Symbol();\r\n                else defaultValue = null;\r\n\r\n                for (let i = 0; i < count; i++) {\r\n                    this.add(innerType?.[\"##STRUCT_CONSTURCTOR##\"]?.() || defaultValue);\r\n                }\r\n            });\r\n\r\n        return List.#_constructor.call(this, ...params);\r\n    };\r\n\r\n    constructor(...params) {\r\n        List.#_constructor.apply(this, params);\r\n\r\n        return this.#initProxy();\r\n    }\r\n\r\n    static T(...params) {\r\n        const CACHE_T_PROXY = new WeakMap();\r\n\r\n        List.T = overload([Function], function (innerType) {\r\n            let proxy = CACHE_T_PROXY.get(innerType);\r\n            !proxy && CACHE_T_PROXY.set(innerType, proxy = new Proxy(List, {\r\n                get: (target, prop, receiver) => {\r\n                    if (prop === \"##INNER_TYPE##\") {\r\n                        return innerType;\r\n                    }\r\n                    return target[prop];\r\n                }\r\n            }));\r\n\r\n            return proxy;\r\n        });\r\n\r\n        return List.T(...params);\r\n    }\r\n\r\n    #initProxy() {\r\n        return this.#proxy = new Proxy(this, {\r\n            get: (target, prop, receiver) => {\r\n                if (prop === \"@@INNER_TYPE@@\") {\r\n                    return this.#innerType;\r\n                }\r\n\r\n                let result = null;\r\n\r\n                if (typeof prop === \"symbol\") {\r\n                    result = this[prop];\r\n                } else if (typeof prop === \"string\") {\r\n                    if (/^\\d+$/.test(prop)) {\r\n                        result = this.#list[prop];\r\n                    } else {\r\n                        result = this[prop];\r\n                    }\r\n                }\r\n\r\n                if (typeof result === \"function\") {\r\n                    return result.bind(this);\r\n                }\r\n\r\n                return result;\r\n            },\r\n            set: (target, prop, value, receiver) => {\r\n                if (typeof prop === \"string\" && /^\\d+$/.test(prop)) {\r\n                    if (prop >= this.#list.length) {\r\n                        throw new Error(`\u7D22\u5F15 ${prop} \u8D85\u51FA\u8303\u56F4\uFF0C\u5217\u8868\u957F\u5EA6\u4E3A ${this.#list.length}\u3002`);\r\n                    }\r\n\r\n                    overload([this.#innerType],\r\n                        /**\r\n                         * @param {T} value - \u503C\r\n                         */\r\n                        (value) => {\r\n                            this.#list[prop] = value;\r\n                        }).call(this, value);\r\n\r\n                    return true;\r\n                }\r\n\r\n                throw new Error(`\u65E0\u6CD5\u5728\u6B64\u5217\u8868\u4E0A\u8BBE\u7F6E\u5C5E\u6027 ${prop}\u3002`);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {Number} index - \u7D22\u5F15\r\n     * @throws {Error}\r\n     */\r\n    #rangeCheck(index) {\r\n        if (index < 0) {\r\n            throw new Error(`\u7D22\u5F15 ${index} \u8D85\u51FA\u8303\u56F4\uFF0C\u7D22\u5F15\u5FC5\u987B\u5927\u4E8E\u6216\u7B49\u4E8E 0\u3002`);\r\n        }\r\n\r\n        if (index >= this.#list.length) {\r\n            throw new Error(`\u7D22\u5F15 ${index} \u8D85\u51FA\u8303\u56F4\uFF0C\u5217\u8868\u957F\u5EA6\u4E3A ${this.#list.length}\u3002`);\r\n        }\r\n    }\r\n\r\n    [Symbol.iterator] = function* () {\r\n        for (let i = 0; i < this.#list.length; i++) {\r\n            yield this.#list[i];\r\n        }\r\n    }\r\n\r\n    add(...params) {\r\n        this.add = overload([[this.#innerType, null]],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {T | null} item \r\n             */\r\n            function (item) {\r\n                this.#list.push(item);\r\n            });\r\n\r\n        return this.add(...params);\r\n    }\r\n\r\n    addRange(...params) {\r\n        List.prototype.addRange = overload([[Array, List]],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {T[] | List<T>} list - \u5217\u8868\r\n             */\r\n            function (list) {\r\n                for (let item of list) {\r\n                    this.add(item);\r\n                }\r\n            }).any(\r\n                /**\r\n                 * @this {List<T>}\r\n                 * @param {T[]} items - \u9879\u76EE\r\n                 */\r\n                function (...items) {\r\n                    for (let item of items) {\r\n                        this.add(item);\r\n                    }\r\n                });\r\n\r\n        return this.addRange(...params);\r\n    }\r\n\r\n    asReadOnly(...params) {\r\n        const ignore = [\"add\", \"addRange\", \"insert\", \"insertRange\", \"remove\", \"removeAt\", \"removeAll\", \"removeRange\", \"clear\", \"reverse\", \"sort\", \"asReadOnly\"];\r\n\r\n        List.prototype.asReadOnly = overload([],\r\n            /**\r\n             * @this {List<T>}\r\n             * @returns {Proxy<List<T>>}\r\n             */\r\n            function () {\r\n                return new Proxy(this, {\r\n                    get: (target, prop, receiver) => {\r\n                        if (ignore.includes(prop)) {\r\n                            throw new Error(`\u65E0\u6CD5\u8BBF\u95EE\u53EA\u8BFB\u5217\u8868\u4E0A\u7684\u65B9\u6CD5 ${prop}\u3002`);\r\n                        }\r\n\r\n                        return this.#proxy[prop];\r\n                    },\r\n                    set: (target, prop, value, receiver) => {\r\n                        throw new Error(`\u65E0\u6CD5\u5728\u53EA\u8BFB\u5217\u8868\u4E0A\u8BBE\u7F6E\u5C5E\u6027 ${prop}\u3002`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.asReadOnly(...params);\r\n    }\r\n\r\n    concat(...params) {\r\n        List.prototype.concat = overload([[Array, List]],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {T[] | List<T>} list - \u5217\u8868\r\n             */\r\n            function (list) {\r\n                /**\r\n                 * @type {List<T>}\r\n                 */\r\n                const newList = new List(this.#innerType);\r\n                for (let item of this) {\r\n                    newList.add(item);\r\n                }\r\n                for (let item of list) {\r\n                    newList.add(item);\r\n                }\r\n                return newList;\r\n            });\r\n\r\n        return this.concat(...params);\r\n    }\r\n\r\n    clear(...params) {\r\n        List.prototype.clear = overload([],\r\n            /**\r\n             * @this {List<T>}\r\n             */\r\n            function () {\r\n                this.#list = [];\r\n            });\r\n\r\n        return this.clear(...params);\r\n    }\r\n\r\n    clone(...params) {\r\n        List.prototype.clone = overload([],\r\n            /**\r\n             * @this {List<T>}\r\n             * @returns {List<T>}\r\n             */\r\n            function () {\r\n                return new List(this.#innerType, this);\r\n            });\r\n\r\n        return this.clone(...params);\r\n    }\r\n\r\n    contains(...params) {\r\n        this.contains = overload([this.#innerType],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {T} item\r\n             * @returns {Boolean}\r\n             */\r\n            function (item) {\r\n                return this.#list.includes(item);\r\n            });\r\n\r\n        return this.contains(...params);\r\n    }\r\n\r\n    copyTo(...params) {\r\n        List.prototype.copyTo = overload()\r\n            .add([Array],\r\n                /**\r\n                 * @this {List<T>}\r\n                 * @param {T[]} array - \u6570\u7EC4\r\n                 */\r\n                function (array) {\r\n                    this.#list.forEach((item, index) => {\r\n                        array[index] = item;\r\n                    });\r\n                })\r\n            .add([Array, Number],\r\n                /**\r\n                 * @this {List<T>}\r\n                 * @param {T[]} array - \u6570\u7EC4\r\n                 * @param {Number} arrayIndex - \u6570\u7EC4\u7D22\u5F15\r\n                 */\r\n                function (array, arrayIndex) {\r\n                    this.#list.forEach((item, index) => {\r\n                        array[arrayIndex + index] = item;\r\n                    });\r\n                })\r\n            .add([Array, Number, Number],\r\n                /**\r\n                 * @this {List<T>}\r\n                 * @param {T[]} array - \u6570\u7EC4\r\n                 * @param {Number} arrayIndex - \u6570\u7EC4\u7D22\u5F15\r\n                 * @param {Number} count - \u6570\u91CF\r\n                 */\r\n                function (array, arrayIndex, count) {\r\n                    for (let i = 0; i < count; i++) {\r\n                        array[arrayIndex + i] = this.#list[i];\r\n                    }\r\n                });\r\n\r\n        return this.copyTo(...params);\r\n    }\r\n\r\n    exists(...params) {\r\n        List.prototype.exists = overload([Function],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Function} predicate - \u8C13\u8BCD\r\n             * @returns {Boolean}\r\n             */\r\n            function (predicate) {\r\n                return this.#list.some(predicate);\r\n            });\r\n\r\n        return this.exists(...params);\r\n    }\r\n\r\n    forEach(...params) {\r\n        List.prototype.forEach = overload([Function],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Function} callback - \u56DE\u8C03\r\n             */\r\n            function (callback) {\r\n                this.#list.forEach(callback);\r\n            });\r\n\r\n        return this.forEach(...params);\r\n    }\r\n\r\n    find(...params) {\r\n        List.prototype.find = overload([Function],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Function} predicate - \u8C13\u8BCD\r\n             * @returns {T?}\r\n             */\r\n            function (predicate) {\r\n                return this.#list.find(predicate);\r\n            });\r\n\r\n        return this.find(...params);\r\n    }\r\n\r\n    findIndex(...params) {\r\n        List.prototype.findIndex = overload([Function],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Function} predicate - \u8C13\u8BCD\r\n             * @returns {Number}\r\n             */\r\n            function (predicate) {\r\n                return this.#list.findIndex(predicate);\r\n            });\r\n\r\n        return this.findIndex(...params);\r\n    }\r\n\r\n    findLast(...params) {\r\n        List.prototype.findLast = overload([Function],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Function} predicate - \u8C13\u8BCD\r\n             * @returns {T?} \r\n             */\r\n            function (predicate) {\r\n                this.#list.reverse();\r\n                let find = this.#list.find(predicate);\r\n                this.#list.reverse();\r\n                return find;\r\n            });\r\n\r\n        return this.findLast(...params);\r\n    }\r\n\r\n    findLastIndex(...params) {\r\n        List.prototype.findLastIndex = overload([Function],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Function} predicate - \u8C13\u8BCD\r\n             * @returns {Number}\r\n             */\r\n            function (predicate) {\r\n                this.#list.reverse();\r\n                let find = this.#list.findIndex(predicate);\r\n                this.#list.reverse();\r\n                return find;\r\n            });\r\n\r\n        return this.findLastIndex(...params);\r\n    }\r\n\r\n    getInnerType(...params) {\r\n        List.prototype.getInnerType = overload([],\r\n            /**\r\n             * @this {List<T>}\r\n             * @returns {T}\r\n             */\r\n            function () {\r\n                return this.#innerType;\r\n            });\r\n\r\n        return this.getInnerType(...params);\r\n    }\r\n\r\n    insert(...params) {\r\n        this.insert = overload([Number, [this.#innerType, null]],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Number} index - \u7D22\u5F15\r\n             * @param {T | null} item - \u9879\u76EE\r\n             */\r\n            function (index, item) {\r\n                this.#rangeCheck(index);\r\n\r\n                this.#list.splice(index, 0, item);\r\n            });\r\n\r\n        return this.insert(...params);\r\n    }\r\n\r\n    insertRange(...params) {\r\n        List.prototype.insertRange = overload([Number, [Array, List]],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Number} index - \u7D22\u5F15\r\n             * @param {T[] | List<T>} list - \u5217\u8868\r\n             */\r\n            function (index, list) {\r\n                this.#rangeCheck(index);\r\n\r\n                for (let item of list) {\r\n                    this.insert(index++, item);\r\n                }\r\n            }).add([Number, \"...\"],\r\n                /**\r\n                 * @this {List<T>}\r\n                 * @param {Number} index - \u7D22\u5F15\r\n                 * @param {T[]} items - \u9879\u76EE\r\n                 */\r\n                function (index, ...items) {\r\n                    this.#rangeCheck(index);\r\n\r\n                    for (let item of items) {\r\n                        this.insert(index++, item);\r\n                    }\r\n                });\r\n\r\n        return this.insertRange(...params);\r\n    }\r\n\r\n    indexOf(...params) {\r\n        this.indexOf = overload([this.#innerType],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {T} item - \u9879\u76EE\r\n             * @returns {Number}\r\n             */\r\n            function (item) {\r\n                return this.#list.indexOf(item);\r\n            });\r\n\r\n        return this.indexOf(...params);\r\n    }\r\n\r\n    lastIndexOf(...params) {\r\n        this.lastIndexOf = overload([this.#innerType],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {T} item - \u9879\u76EE\r\n             * @returns {Number}\r\n             */\r\n            function (item) {\r\n                return this.#list.lastIndexOf(item);\r\n            });\r\n\r\n        return this.lastIndexOf(...params);\r\n    }\r\n\r\n    remove(...params) {\r\n        this.remove = overload([this.#innerType],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {T} item - \u9879\u76EE\r\n             * @returns {Boolean}\r\n             */\r\n            function (item) {\r\n                const index = this.#list.indexOf(item);\r\n\r\n                if (index !== -1) {\r\n                    this.#list.splice(index, 1);\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n        return this.remove(...params);\r\n    }\r\n\r\n    removeAt(...params) {\r\n        List.prototype.removeAt = overload([Number],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Number} index - \u7D22\u5F15 \r\n             */\r\n            function (index) {\r\n                this.#rangeCheck(index);\r\n\r\n                this.#list.splice(index, 1);\r\n            });\r\n\r\n        return this.removeAt(...params);\r\n    }\r\n\r\n    removeAll(...params) {\r\n        List.prototype.removeAll = overload([Function],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Function} predicate - \u8C13\u8BCD\r\n             * @returns {Number}\r\n             */\r\n            function (predicate) {\r\n                let count = 0;\r\n\r\n                for (let i = this.#list.length - 1; i >= 0; i--) {\r\n                    if (predicate(this.#list[i])) {\r\n                        this.#list.splice(i, 1);\r\n                        count++;\r\n                    }\r\n                }\r\n\r\n                return count;\r\n            });\r\n\r\n        return this.removeAll(...params);\r\n    }\r\n\r\n    removeRange(...params) {\r\n        List.prototype.removeRange = overload([Number, Number],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Number} index - \u7D22\u5F15\r\n             * @param {Number} count - \u6570\u91CF\r\n             */\r\n            function (index, count) {\r\n                this.#rangeCheck(index);\r\n                this.#rangeCheck(index + count - 1);\r\n\r\n                this.#list.splice(index, count);\r\n            });\r\n\r\n        return this.removeRange(...params);\r\n    }\r\n\r\n    reverse(...params) {\r\n        List.prototype.reverse = overload([],\r\n            /**\r\n             * @this {List<T>}\r\n             */\r\n            function () {\r\n                this.#list.reverse();\r\n            })\r\n            .add([Number, Number],\r\n                /**\r\n                 * @this {List<T>}\r\n                 * @param {Number} index - \u7D22\u5F15\r\n                 * @param {Number} count - \u6570\u91CF \r\n                 */\r\n                function (index, count) {\r\n                    this.#rangeCheck(index);\r\n                    this.#rangeCheck(index + count - 1);\r\n\r\n                    const temp = this.#list.splice(index, count);\r\n                    temp.reverse();\r\n                    this.#list.splice(index, 0, ...temp);\r\n                });\r\n\r\n        return this.reverse(...params);\r\n    }\r\n\r\n    slice(...params) {\r\n        List.prototype.slice = overload().add([Number, Number],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Number} start - \u5F00\u59CB\r\n             * @param {Number} end - \u7ED3\u675F\r\n             * @returns {List<T>}\r\n             */\r\n            function (start, end) {\r\n                return new List(this.#innerType, this.#list.slice(start, end));\r\n            });\r\n\r\n        return this.slice(...params);\r\n    }\r\n\r\n    sort(...params) {\r\n        List.prototype.sort = overload()\r\n            .add([],\r\n                /**\r\n                 * @this {List<T>}\r\n                 */\r\n                function () {\r\n                    this.#list.sort();\r\n                })\r\n            .add([Function],\r\n                /**\r\n                 * @this {List<T>}\r\n                 * @param {Function} compareFn - \u6BD4\u8F83\u51FD\u6570 \r\n                 */\r\n                function (compareFn) {\r\n                    this.#list.sort(compareFn);\r\n                });\r\n\r\n        return this.sort(...params);\r\n    }\r\n\r\n    toArray(...params) {\r\n        List.prototype.toArray = overload([],\r\n            /**\r\n             * @this {List<T>}\r\n             * @returns {T[]}\r\n             */\r\n            function () {\r\n                return this.#list.slice();\r\n            });\r\n\r\n        return this.toArray(...params);\r\n    }\r\n\r\n    trueForAll(...params) {\r\n        List.prototype.trueForAll = overload([Function],\r\n            /**\r\n             * @this {List<T>}\r\n             * @param {Function} predicate - \u8C13\u8BCD\r\n             * @returns {Boolean}\r\n             */\r\n            function (predicate) {\r\n                return this.#list.every(predicate);\r\n            });\r\n\r\n        return this.trueForAll(...params);\r\n    }\r\n\r\n    toString(...params) {\r\n        List.prototype.toString = overload().any(\r\n            /**\r\n             * @this {List<T>}\r\n             * @param  {...any} params - \u53C2\u6570\r\n             * @returns {String}\r\n             */\r\n            function (...params) {\r\n                return this.#list.toString(...params);\r\n            });\r\n\r\n        return this.toString(...params);\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["ANY_STR", "REST_STR", "INNER_TYPE_FATHER", "INNER_TYPE_SON", "matchType", "param", "type", "i", "getTypeName", "paramType", "className", "v", "throwStackInfo", "err", "types", "args", "stackList", "errorMessage", "formattedStack", "errorMethodName", "stackLine", "index", "arr", "parts", "fullMethodName", "methodName", "matchingTypes", "hasError", "expectedType", "expectedTypeNames", "createOverload", "TYPES", "FNS", "OPTIONS", "anyFn", "runAny", "overload", "params", "paramsLength", "loop", "options", "typesLength", "j", "convert", "fn", "key", "isArray", "typeofStr", "src_default", "result", "List", "_List", "#list", "#innerType", "#proxy", "#_constructor", "params", "src_default", "innerType", "list", "item", "count", "defaultValue", "i", "#initProxy", "CACHE_T_PROXY", "proxy", "target", "prop", "receiver", "result", "value", "#rangeCheck", "index", "items", "ignore", "newList", "array", "arrayIndex", "predicate", "callback", "find", "temp", "start", "end", "compareFn"]
}
